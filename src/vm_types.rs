use std::fmt::Display;
use clap::ValueEnum;
use serde::{Serialize, Deserialize};

#[derive(Clone, Debug, Serialize, Deserialize, ValueEnum)]
pub enum VmType {
    T2Nano,
    T2Micro,
    T2Small,
    T2Medium,
    T2Large,
    T2XLarge,
    T22XLarge,
    T3ANano,
    T3AMicro,
    T3ASmall,
    T3AMedium,
    T3ALarge,
    T3AXLarge,
    T3A2XLarge,
    T3Nano,
    T3Micro,
    T3Small,
    T3Medium,
    T3Large,
    T3XLarge,
    T32XLarge,
    T4GNano,
    T4GMicro,
    T4GSmall,
    T4GMedium,
    T4GLarge,
    T4GXLarge,
    T4G2XLarge,
    M4Large,
    M4XLarge,
    M42XLarge,
    M44XLarge,
    M5ALarge,
    M5AXLarge,
    M5A2XLarge,
    M5A4XLarge,
    M5ADLarge,
    M5ADXLarge,
    M5AD2XLarge,
    M5AD4XLarge,
    M5ZNLarge,
    M5ZNXLarge,
    M5ZN2XLarge,
    M5ZN3XLarge,
    M5NLarge,
    M5NXLarge,
    M5N2XLarge,
    M5N4XLarge,
    M5DNLarge,
    M5DNXLarge,
    M5DN2XLarge,
    M5DN4XLarge,
    M6ALarge,
    M6AXLarge,
    M6A2XLarge,
    M6A4XLarge,
    M6INLarge,
    M6INXLarge,
    M6IN2XLarge,
    M6IN4XLarge,
    M6IDNLarge,
    M6IDNXLarge,
    M6IDN2XLarge,
    M6IDN4XLarge,
    M6ILarge,
    M6IXLarge,
    M6I2XLarge,
    M6I4XLarge,
    M6IDLarge,
    M6IDXLarge,
    M6ID2XLarge,
    M6GMedium,
    M6GLarge,
    M6GXLarge,
    M6G2XLarge,
    M6G4XLarge,
    M6GDMedium,
    M6GDLarge,
    M6GDXLarge,
    M6GD2XLarge,
    M6GD4XLarge,
    M7AMedium,
    M7ALarge,
    M7AXLarge,
    M7A2XLarge,
    M7A4XLarge,
    M7IFlexLarge,
    M7IFlexXLarge,
    M7IFlex2XLarge,
    M7IFlex4XLarge,
    M7ILarge,
    M7IXLarge,
    M7I2XLarge,
    M7I4XLarge,
    M7GMedium,
    M7GLarge,
    M7GXLarge,
    M7G2XLarge,
    M7G4XLarge,
    M7GDMedium,
    M7GDLarge,
    M7GDXLarge,
    M7GD2XLarge,
    M7GD4XLarge
}

impl Display for VmType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::T2Nano => write!(f, "t2.nano"), 
            Self::T2Micro => write!(f, "t2.micro"),
            Self::T2Small => write!(f, "t2.small"),
            Self::T2Medium => write!(f, "t2.medium"),
            Self::T2Large => write!(f, "t2.large"),
            Self::T2XLarge => write!(f, "t2.xlarge"),
            Self::T22XLarge=> write!(f, "t2.2xlarge"),
            Self::T3ANano => write!(f, "t3a.nano"),
            Self::T3AMicro => write!(f, "t3a.micro"),
            Self::T3ASmall => write!(f, "t3a.small"),
            Self::T3AMedium => write!(f, "t3a.medium"),
            Self::T3ALarge => write!(f, "t3a.large"),
            Self::T3AXLarge => write!(f, "t3a.xlarge"),
            Self::T3A2XLarge => write!(f, "t3a.2xlarge"),
            Self::T3Nano => write!(f, "t3.nano"),
            Self::T3Micro => write!(f, "t3.micro"),
            Self::T3Small => write!(f, "t3.small"),
            Self::T3Medium => write!(f, "t3.medium"),
            Self::T3Large => write!(f, "t3.large"),
            Self::T3XLarge => write!(f, "t3.xlarge"),
            Self::T32XLarge => write!(f, "t3.2xlarge"),
            Self::T4GNano => write!(f, "t4g.nano"),
            Self::T4GMicro => write!(f, "t4g.micro"),
            Self::T4GSmall => write!(f, "t4g.small"),
            Self::T4GMedium => write!(f, "t4g.medium"),
            Self::T4GLarge => write!(f, "t4g.large"),
            Self::T4GXLarge => write!(f, "t4g.xlarge"),
            Self::T4G2XLarge => write!(f, "t4g.2xlarge"),
            Self::M4Large => write!(f, "m4.large"),
            Self::M4XLarge => write!(f, "m4.xlarge"),
            Self::M42XLarge => write!(f, "m4.2xlarge"),
            Self::M44XLarge => write!(f, "m4.4xlarge"),
            Self::M5ALarge => write!(f, "m5a.large"),
            Self::M5AXLarge => write!(f, "m5a.xlarge"),
            Self::M5A2XLarge => write!(f, "m5a.2xlarge"),
            Self::M5A4XLarge => write!(f, "m5a.4xlarge"),
            Self::M5ADLarge => write!(f, "m5ad.large"),
            Self::M5ADXLarge => write!(f, "m5ad.xlarge"),
            Self::M5AD2XLarge => write!(f, "m5ad.2xlarge"),
            Self::M5AD4XLarge => write!(f, "m5ad.4xlarge"),
            Self::M5ZNLarge => write!(f, "m5zn.large"),
            Self::M5ZNXLarge => write!(f, "m5zn.xlarge"),
            Self::M5ZN2XLarge => write!(f, "m5zn.2xlarge"),
            Self::M5ZN3XLarge => write!(f, "m5zn.3xlarge"),
            Self::M5NLarge => write!(f, "m5n.large"),
            Self::M5NXLarge => write!(f, "m5n.xlarge"),
            Self::M5N2XLarge => write!(f, "m5n.2xlarge"),
            Self::M5N4XLarge => write!(f, "m5n.4xlarge"),
            Self::M5DNLarge => write!(f, "m5dn.large"),
            Self::M5DNXLarge => write!(f, "m5dn.xlarge"),
            Self::M5DN2XLarge => write!(f, "m5dn.2xlarge"),
            Self::M5DN4XLarge => write!(f, "m5dn.4xlarge"),
            Self::M6ALarge => write!(f, "m6a.large"),
            Self::M6AXLarge => write!(f, "m6a.xlarge"),
            Self::M6A2XLarge => write!(f, "m6a.2xlarge"),
            Self::M6A4XLarge => write!(f, "m6a.4xlarge"),
            Self::M6INLarge => write!(f, "m6in.larage"),
            Self::M6INXLarge => write!(f, "m6in.xlarge"),
            Self::M6IN2XLarge => write!(f, "m6in.2xlarge"),
            Self::M6IN4XLarge => write!(f, "m6in.4xlarge"),
            Self::M6IDNLarge => write!(f, "m6idn.large"),
            Self::M6IDNXLarge => write!(f, "m6idn.xlarge"),
            Self::M6IDN2XLarge => write!(f, "m6idn.2xlarge"),
            Self::M6IDN4XLarge => write!(f, "m6idn.4xlarge"),
            Self::M6ILarge => write!(f, "m6i.large"),
            Self::M6IXLarge => write!(f, "m6ix.large"),
            Self::M6I2XLarge => write!(f, "m6i.2xlarge"),
            Self::M6I4XLarge => write!(f, "m6i.4xlarge"),
            Self::M6IDLarge => write!(f, "m6id.large"),
            Self::M6IDXLarge => write!(f, "m6id.xlarge"),
            Self::M6ID2XLarge => write!(f, "m6id.2xlarge"),
            Self::M6GMedium => write!(f, "m6g.medium"),
            Self::M6GLarge => write!(f, "m6g.large"),
            Self::M6GXLarge => write!(f, "m6g.xlarge"),
            Self::M6G2XLarge => write!(f, "m6g.2xlarge"),
            Self::M6G4XLarge => write!(f, "m6g.4xlarge"),
            Self::M6GDMedium => write!(f, "m6gd.medium"),
            Self::M6GDLarge => write!(f, "m6gd.large"),
            Self::M6GDXLarge => write!(f, "m6gd.xlarge"),
            Self::M6GD2XLarge => write!(f, "m6gd.2xlarge"),
            Self::M6GD4XLarge => write!(f, "m6gd.4xlarge"),
            Self::M7AMedium => write!(f, "m7a.medium"),
            Self::M7ALarge => write!(f, "m7a.large"),
            Self::M7AXLarge => write!(f, "m7a.xlarge"),
            Self::M7A2XLarge => write!(f, "m7a.2xlarge"),
            Self::M7A4XLarge => write!(f, "m7a.4xlarge"),
            Self::M7IFlexLarge => write!(f, "m7i-flex.large"),
            Self::M7IFlexXLarge => write!(f, "m7i-flex.xlarge"),
            Self::M7IFlex2XLarge => write!(f, "m7i-flex.2xlarge"),
            Self::M7IFlex4XLarge => write!(f, "m7i-flex.4xlarge"),
            Self::M7ILarge => write!(f, "m7i.large"),
            Self::M7IXLarge => write!(f, "m7i.xlarge"),
            Self::M7I2XLarge => write!(f, "m7i.2xlarge"),
            Self::M7I4XLarge => write!(f, "m7i.4xlarge"),
            Self::M7GMedium => write!(f, "m7g.medium"),
            Self::M7GLarge => write!(f, "m7g.large"),
            Self::M7GXLarge => write!(f, "m7g.xlarge"),
            Self::M7G2XLarge => write!(f, "m7g.2xlarge"),
            Self::M7G4XLarge => write!(f, "m7g.4xlarge"),
            Self::M7GDMedium => write!(f, "m7gd.medium"),
            Self::M7GDLarge => write!(f, "m7gd.large"),
            Self::M7GDXLarge => write!(f, "m7gd.xlarge"),
            Self::M7GD2XLarge => write!(f, "m7gd.2xlarge"),
            Self::M7GD4XLarge => write!(f, "m7gd.4xlarge"),
        }
    }
}

